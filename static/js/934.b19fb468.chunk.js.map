{"version":3,"file":"static/js/934.b19fb468.chunk.js","mappings":"0OAEA,EAUIA,EAAQ,KATVC,EADF,EACEA,mBACAC,EAFF,EAEEA,gBACAC,EAHF,EAGEA,cACAC,EAJF,EAIEA,iBACAC,EALF,EAKEA,cACAC,EANF,EAMEA,YACAC,EAPF,EAOEA,mBACAC,EARF,EAQEA,gBACAC,EATF,EASEA,cAGFC,EAAAA,EAAAA,SAAAA,QAAyB,wCAElB,I,SCbMC,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,MAgBjB,OACE,kBAAMC,SAfa,SAAAC,GACnBA,EAAEC,iBAEF,IAAMC,EAAOF,EAAEG,OAETC,EAAU,CACdC,KAAML,EAAEM,cAAcC,SAASF,KAAKG,MACpCC,OAAQT,EAAEM,cAAcC,SAASG,MAAMF,OAGzCX,EDWF,SAAC,GAAD,IAAGQ,EAAH,EAAGA,KAAMI,EAAT,EAASA,OAAT,0CACA,WAAMZ,GAAN,uFAEIA,EAASR,KAEHsB,EAAa,CACjBN,KAAAA,EACAI,OAAAA,GANN,SAQUd,EAAAA,EAAAA,KAAW,YAAagB,GARlC,OASId,EAASP,EAAcqB,IAT3B,gDAWId,EAASN,EAAY,KAAMqB,UAX/B,yDADA,sDCXWC,CAAcT,IACvBF,EAAKY,OACN,EAGC,WACE,mBAAOC,QAAQ,OAAf,kBAEE,kBACEC,KAAK,OACLC,GAAG,OACHC,MAAM,6DACNC,UAAQ,QAGZ,mBAAOJ,QAAQ,QAAf,0BAEE,kBACEC,KAAK,MACLC,GAAG,QACHC,MAAM,+FACNC,UAAQ,QAGZ,mBAAQH,KAAK,SAAb,2BAGL,ECxCYI,EAAc,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACtBxB,GAAWC,EAAAA,EAAAA,MAEXwB,EAAa,SAAAL,GFqCQ,IAAAM,EEpCzB1B,GFoCyB0B,EEpCFN,EFoCW,mCAAI,WAAMpB,GAAN,iFAEtCA,EAASL,KAF6B,SAIhCG,EAAAA,EAAAA,OAAA,oBAA0B4B,IAJM,OAKtC1B,EAASJ,EAAgB8B,IALa,gDAOtC1B,EAASH,EAAc,KAAMkB,UAPS,yDAAJ,uDEnCnC,EAED,OACE,0BACGS,EAAKhB,KADR,KACgBgB,EAAKZ,QACnB,mBAAQO,KAAK,SAASQ,QAAS,kBAAMF,EAAWD,EAAKJ,GAAtB,EAA/B,yBAKL,EClBYQ,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,ECItBC,EAAc,WACzB,IAAMF,GAAWG,EAAAA,EAAAA,IAAYL,GAE7B,OACE,0BACE,wBACGE,EAIEI,KAAI,SAAAV,GAAI,OACP,SAACD,EAAD,CAA2BC,KAAMA,GAAfA,EAAKJ,GADhB,OAMlB,E,SCED,EAhBiB,WACf,IAAMpB,GAAWC,EAAAA,EAAAA,MAMjB,OAJAkC,EAAAA,EAAAA,YAAU,WACRnC,ELMyB,mCAAM,WAAMA,GAAN,uFAE/BA,EAASX,KAFsB,SAGRS,EAAAA,EAAAA,IAAU,aAHF,OAGzBsC,EAHyB,OAI/BpC,EAASV,EAAgB8C,EAASC,OAJH,gDAM/BrC,EAAST,EAAc,KAAMwB,UANE,yDAAN,sDKL1B,GAAE,CAACf,KAGF,4BACE,SAACD,EAAD,KACA,0DACA,SAACiC,EAAD,MAGL,C","sources":["redux/contacts/operations.js","components/ContactForm/index.jsx","components/ContactItem/index.jsx","redux/contacts/selectors.js","components/ContactList/index.jsx","pages/Contacts.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst {\n  fetchingInProgress,\n  fetchingSuccess,\n  fetchingError,\n  addingInProgress,\n  addingSuccess,\n  addingError,\n  deletingInProgress,\n  deletingSuccess,\n  deletingError,\n} = require('./contactsSlice');\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n\nexport const fetchContacts = () => async dispatch => {\n  try {\n    dispatch(fetchingInProgress());\n    const response = await axios.get('/contacts');\n    dispatch(fetchingSuccess(response.data));\n  } catch (error) {\n    dispatch(fetchingError(error.message));\n  }\n};\n\nexport const addNewContact =\n  ({ name, number }) =>\n  async dispatch => {\n    try {\n      dispatch(addingInProgress());\n\n      const newContact = {\n        name,\n        number,\n      };\n      await axios.post('/contacts', newContact);\n      dispatch(addingSuccess(newContact));\n    } catch (error) {\n      dispatch(addingError(error.message));\n    }\n  };\n\nexport const deleteContact = contactId => async dispatch => {\n  try {\n    dispatch(deletingInProgress());\n\n    await axios.delete(`/contacts/${contactId}`);\n    dispatch(deletingSuccess(contactId));\n  } catch (error) {\n    dispatch(deletingError(error.message));\n  }\n};\n","import { useDispatch } from 'react-redux';\nimport { addNewContact } from 'redux/contacts/operations';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const form = e.target;\n\n    const contact = {\n      name: e.currentTarget.elements.name.value,\n      number: e.currentTarget.elements.phone.value,\n    };\n\n    dispatch(addNewContact(contact));\n    form.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"name\">\n        Name\n        <input\n          type=\"text\"\n          id=\"name\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces\"\n          required\n        />\n      </label>\n      <label htmlFor=\"phone\">\n        Phone number\n        <input\n          type=\"tel\"\n          id=\"phone\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactItem = ({ item }) => {\n  const dispatch = useDispatch();\n\n  const deleteItem = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <li>\n      {item.name}: {item.number}\n      <button type=\"button\" onClick={() => deleteItem(item.id)}>\n        Usu≈Ñ\n      </button>\n    </li>\n  );\n};\n","export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","import { ContactItem } from 'components/ContactItem';\nimport { useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n\n  return (\n    <div>\n      <ul>\n        {contacts\n          // .filter(item =>\n          //   item.name.toLowerCase().includes(filterQuery.toLowerCase())\n          // )\n          .map(item => (\n            <ContactItem key={item.id} item={item} />\n          ))}\n      </ul>\n    </div>\n  );\n};\n","import { ContactForm } from 'components/ContactForm';\nimport { ContactList } from 'components/ContactList';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <ContactForm />\n      <h3>Your Phonebook contact list:</h3>\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["require","fetchingInProgress","fetchingSuccess","fetchingError","addingInProgress","addingSuccess","addingError","deletingInProgress","deletingSuccess","deletingError","axios","ContactForm","dispatch","useDispatch","onSubmit","e","preventDefault","form","target","contact","name","currentTarget","elements","value","number","phone","newContact","message","addNewContact","reset","htmlFor","type","id","title","required","ContactItem","item","deleteItem","contactId","onClick","selectContacts","state","contacts","items","ContactList","useSelector","map","useEffect","response","data"],"sourceRoot":""}